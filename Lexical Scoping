makeCacheMatrix <- function(x = matrix()) {
invrs <- NULL
set <- function(y) {
x <- y
invrs <- NULL
}
get <- function() x
setinverse <- function(inverse) invrs <- inverse
getinverse <- function() invrs
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}

cacheSolve <- function(x, ...) {
invrs <= x$getinverse()
if(!is.null(invrs)) {
message("getting cached data")
return(invrs)
}
mat <- x$get()
invrs <- solve(mat, ...)
x$setinverse(invrs)
invrs
}

makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}

cacheSolve <- function(x, ...) {

#Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}

my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()

my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()

makeCacheMatrix <- function(x = matrix()) {
invr <- NULL
set <- function(y) {
x <<- y
invr <<- NULL
}
get <- function() x
setinverse <- function(inverse) invr <<- inverse
getinverse <- function() invr
list(set=set, get=get, setinverse=setinverse, getinverse = getinverse)
}

#The below fn returns the inverse of the matrix
cacheSolve <- function(x, ...) {
invr <= x$getinverse()
if(!is.null(invr)) {
message("Getting Cached Data:-")
return(invr)
}
matrx <- x$get()
invr <- solve(matrx, ...)
x$setinverse(invr)
invr
}
